from vr import db, app
from marshmallow import Schema, fields
from marshmallow import post_load



class VulnerabilityRemediation(db.Model):
    __table_args__ = {'extend_existing': True}
    __tablename__ = 'VulnerabilityRemediation'
    ID = db.Column(db.Integer, primary_key=True)
    VulnerabilityID = db.Column(db.Integer, db.ForeignKey('Vulnerabilities.VulnerabilityID', ondelete='CASCADE'))
    TechnologyID = db.Column(db.Integer, db.ForeignKey('Technologies.TechnologyID', ondelete='CASCADE'))
    OpenDate = db.Column(db.DateTime, index=True)
    Status = db.Column(db.String(20))
    Priority = db.Column(db.String(20))
    CloseDate = db.Column(db.DateTime, index=True)
    ClosedBy = db.Column(db.String(20))

    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

    def __repr__(self):
        return '<VulnerabilityRemediation(name={self.VulnerabilityID!r})>'.format(self=self)


class VulnerabilityRemediationSchema(Schema):
    ID = fields.Int()
    VulnerabilityID = fields.Int()
    TechnologyID = fields.Int()
    OpenDate = fields.DateTime()
    Status = fields.Str()
    Priority = fields.Str()
    CloseDate = fields.DateTime()
    ClosedBy = fields.Str()


class MakeVulnerabilityRemediationSchema(VulnerabilityRemediationSchema):
    @post_load
    def make_it(self, data, **kwargs):
        return VulnerabilityRemediation(**data)



