from vr import db, app
from marshmallow import Schema, fields
from marshmallow import post_load
if app.config['RUNTIME_ENV'] == 'test':
    from sqlalchemy.dialects.sqlite import TEXT as LONGTEXT
else:
    from sqlalchemy.dialects.mysql import LONGTEXT



class VulnerabilityScans(db.Model):
    __table_args__ = {'extend_existing': True}
    __tablename__ = 'VulnerabilityScans'
    ID = db.Column(db.Integer, primary_key=True)
    ScanName = db.Column(db.String(200))
    ScanType = db.Column(db.String(30))
    ScanTargets = db.Column(LONGTEXT)
    ScanStartDate = db.Column(db.DateTime, index=True)
    ScanEndDate = db.Column(db.DateTime, index=True)
    IntegrationID = db.Column(db.Integer)
    ApplicationId = db.Column(db.Integer)
    Branch = db.Column(db.String(200))

    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

    def __repr__(self):
        return '<VulnerabilityScans(name={self.ScanName!r})>'.format(self=self)


class VulnerabilityScansSchema(Schema):
    ID = fields.Int()
    ScanName = fields.Str()
    ScanType = fields.Str()
    ScanTargets = fields.Raw()
    ScanStartDate = fields.DateTime()
    ScanEndDate = fields.DateTime()
    IntegrationID = fields.Int()
    ApplicationId = fields.Int()
    Branch = fields.Str()
    issue_cnt = fields.Int()
    open_issue_cnt = fields.Int()
    closed_issue_cnt = fields.Int()
    ra_issue_cnt = fields.Int()
    findings_cnt = fields.Int()
    closed_findings_cnt = fields.Int()
    open_findings_cnt = fields.Int()

class MakeVulnerabilityScansSchema(VulnerabilityScansSchema):
    @post_load
    def make_it(self, data, **kwargs):
        return VulnerabilityScans(**data)



